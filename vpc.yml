# Add Format Version section here.
AWSTemplateFormatVersion: "2010-09-09"

Description: AWS Cloud  module 6 => provision a Vpc with 2 subnets, one public - one private, a redshift cluster, a lamda function, and a bus that runs it every 5 minutes

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcIpv4Cidr:
    Description: The IPv4 CIDR block you wish to assign to your Vpc.
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.10.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.20.0/24

  DbName:
    Description: Please enter the name of the database to create in redshift. 
    Type: String 
    AllowedPattern: "([a-z])([a-z]|[0-9])*"
    Default: dev

  DbUsername:
    Description: Please enter the name of the master user for your redshift database.
    Type: String 
    AllowedPattern: "([a-z])([a-z]|[0-9])*"
    Default: awsuser

  DbPassword:
    Description: Please enter the name of the master pasword for your redshift database.
    Type: String 
    AllowedPattern: "([A-Z])([a-z]|[0-9])*"
    Default: Awsuser123

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Input Parameters"
        Parameters:
        - DbName
        - DbUsername

Resources:

#provision a VPC with a public and private subnet. Each of these should have a route table. 

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcIpv4Cidr
      EnableDnsHostnames: true 
      EnableDnsSupport: true 

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet1CIDR
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true 
      Tags:
        - Key: Name 
          Value: !Sub '${EnvironmentName} Public Subnet (AZ1)'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet1CIDR
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: false 
      Tags:
        - Key: Name 
          Value: !Sub '${EnvironmentName} Private Subnet (AZ1)'

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

# add a private subnet cluster group and attach our redshift cluster to that group so it runs on our vpc.

  PrivateClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: private subnet cluster for our redshift cluster.
      SubnetIds:
        - !Ref PrivateSubnet1

  PrivateSubnetRedshiftCluster:
    Type: AWS::Redshift::Cluster
    Properties:
      MasterUsername: !Sub ${DbUsername}
      MasterUserPassword: !Sub ${DbPassword}
      NodeType: dc2.large
      ClusterType: multi-node 
      DBName: !Sub ${DbName}
      NumberOfNodes: 2
      ClusterSubnetGroupName: !Ref PrivateClusterSubnetGroup

# to-do: provision a lambda that runs inside the same vpc and has visibility to our redshift cluster. 

# to-do: provision a role for our lambda that allows it to exec queries, look at results, view tables, dbs, etc.
  LambdaRedshiftRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: RedshiftAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: redshift:GetClusterCredentials
                Resource: 
                  - !Sub arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${PrivateSubnetRedshiftCluster}
                  - !Sub arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbname:${PrivateSubnetRedshiftCluster}/${DbName}
                  - !Sub arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbuser:${PrivateSubnetRedshiftCluster}/${DbUsername}
              - Effect: Allow 
                Action:
                - redshift-data:ExecuteStatement
                - redshift-data:ListStatements
                - redshift-data:GetStatementResult
                - redshift-data:DescribeStatement
                - redshift-data:ListDatabases
                - redshift-data:ListTables
                Resource: "*"

  # create a lambda function that tries to query redshift for databases.

  # to-do: figure out a way to make the database, dbuser, and clusterID params automatically embedded during stack formation.

  PrivateRedshiftLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRedshiftRole.Arn
      Runtime: python3.6
      Code:
        ZipFile: |
          import boto3
          client = boto3.client('redshift-data')

          def lambda_handler(event, context):
              
              clusterIdentifier = 'privatesubnetredshiftcluster-tnojdx9cxjfu'
              database = 'dev'
              dbUser = 'awsuser'
              
              #check if public.insertdemotable exists.
              
              tableSearch = client.list_tables(
                  ClusterIdentifier=clusterIdentifier,
                  Database=database,
                  DbUser=dbUser,
                  MaxResults=123,
                  SchemaPattern='public',
                  TablePattern='insertdemotable'
              )
              
              doesDemoTableExist = (len(tableSearch["Tables"]) > 0)
              
              #if not, execute code that creates a demotable. 
              if doesDemoTableExist==False:
                  print('creating table...')
                  response = client.execute_statement(
                      ClusterIdentifier=clusterIdentifier,
                      Database=database,
                      DbUser=dbUser,
                      Sql='CREATE TABLE insertdemotable (ID INT NOT NULL, CityName VARCHAR(255) NOT NULL);',
                      StatementName='insertSQLOperation',
                      WithEvent=False
                  )
                  
                  print(response)



Outputs:
  Vpc:
    Description: A reference to the created Vpc
    Value: !Ref Vpc

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
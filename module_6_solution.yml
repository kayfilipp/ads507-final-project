# Add Format Version section here.
AWSTemplateFormatVersion: "2010-09-09"

Description: AWS Cloud  module 6 => provision a Vpc with a private subnet, a redshift cluster, a lamda function, and a bus that runs it every 5 minutes

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcIpv4Cidr:
    Description: The IPv4 CIDR block you wish to assign to your Vpc.
    Type: String
    Default: 10.0.0.0/16

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.20.0/24

  DbName:
    Description: Please enter the name of the database to create in redshift. 
    Type: String 
    AllowedPattern: "([a-z])([a-z]|[0-9])*"
    Default: dev

  DbUsername:
    Description: Please enter the name of the master user for your redshift database.
    Type: String 
    AllowedPattern: "([a-z])([a-z]|[0-9])*"
    Default: awsuser

  DbPassword:
    Description: Please enter the name of the master pasword for your redshift database.
    Type: String 
    AllowedPattern: "([A-Z])([a-z]|[0-9])*"
    Default: Awsuser123

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Input Parameters"
        Parameters:
        - DbName
        - DbUsername

Resources:

#provision a VPC with a private subnet.

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcIpv4Cidr
      EnableDnsHostnames: true 
      EnableDnsSupport: true 

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet1CIDR
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: false 
      Tags:
        - Key: Name 
          Value: !Sub '${EnvironmentName} Private Subnet (AZ1)'

# add a private subnet cluster group and attach our redshift cluster to that group so it runs on our vpc.

  PrivateClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: private subnet cluster for our redshift cluster.
      SubnetIds:
        - !Ref PrivateSubnet1

  PrivateSubnetRedshiftCluster:
    Type: AWS::Redshift::Cluster
    Properties:
      MasterUsername: !Sub ${DbUsername}
      MasterUserPassword: !Sub ${DbPassword}
      NodeType: dc2.large
      ClusterType: multi-node 
      DBName: !Sub ${DbName}
      NumberOfNodes: 2
      ClusterSubnetGroupName: !Ref PrivateClusterSubnetGroup
      PubliclyAccessible: false

# provision a role for our lambda that allows it to exec queries, look at results, view tables, dbs, etc.
  LambdaRedshiftRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: RedshiftAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: redshift:GetClusterCredentials
                Resource: 
                  - !Sub arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${PrivateSubnetRedshiftCluster}
                  - !Sub arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbname:${PrivateSubnetRedshiftCluster}/${DbName}
                  - !Sub arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbuser:${PrivateSubnetRedshiftCluster}/${DbUsername}
              - Effect: Allow 
                Action:
                - redshift-data:ExecuteStatement
                - redshift-data:ListDatabases
                - redshift-data:ListTables
                Resource: "*"

  # create a lambda function that tries to query redshift for databases.
  # create env variables we can pass to our client.list_tables, exec functions

  PrivateRedshiftLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRedshiftRole.Arn
      Runtime: python3.6
      Environment:
        Variables:
          CLUSTER_ID : !Ref PrivateSubnetRedshiftCluster
          DATABASE_NAME: !Sub ${DbName}
          DATABASE_USER: !Sub ${DbUsername}
      Code:
        ZipFile: |
          import boto3
          import os 
          import json

          #deprecated but should satisfy the requirements for this assignment.
          import botocore.vendored.requests as requests

          client = boto3.client('redshift-data')

          def lambda_handler(event, context):
              
              #query a random wikipedia article and pull the first title we see:
                  # 1. get the content from the response
                  # 2. split body to get the first instance of the title container, split that by the closing tag to get 
                  # the inner contents
                  # 3. get everything before the " - Wikipedia " Suffix to get the title of the article.
                  
              req = str(requests.get("https://en.wikipedia.org/wiki/Special:Random").content)
              wikiTitle = req.split("<title>")[1].split("</title>")[0].split(" - ")[0]
              
              clusterIdentifier = os.environ["CLUSTER_ID"]
              database = os.environ["DATABASE_NAME"]
              dbUser = os.environ["DATABASE_USER"]
              
              #check if public.insertdemotable exists.
              
              tableSearch = client.list_tables(
                  ClusterIdentifier=clusterIdentifier,
                  Database=database,
                  DbUser=dbUser,
                  MaxResults=123,
                  SchemaPattern='public',
                  TablePattern='insertdemotable'
              )
              
              doesDemoTableExist = (len(tableSearch["Tables"]) > 0)
              
              # if not, execute code that creates a demotable. 
              if doesDemoTableExist==False:
                  print('creating table...')
                  response = client.execute_statement(
                      ClusterIdentifier=clusterIdentifier,
                      Database=database,
                      DbUser=dbUser,
                      Sql='CREATE TABLE insertdemotable (ID INT IDENTITY(0,1), WikiTitle VARCHAR(255) NOT NULL, PRIMARY KEY( id ));',
                      StatementName='insertSQLOperation',
                      WithEvent=False
                  )
                  
                  print(response)

              # insert a row! 
              print('adding row...')
              insertRow = client.execute_statement(
                  ClusterIdentifier=clusterIdentifier,
                  Database=database,
                  DbUser=dbUser,
                  Sql= f"INSERT INTO insertdemotable(WikiTitle) VALUES ('{wikiTitle}');",
                  StatementName='InsertWikiSQL',
                  WithEvent=False
              )
              
              print(wikiTitle)
              return(insertRow['ResponseMetadata'])


  # provision a rule that runs every five minutes and targets the lambda we made.
  LambdaFiveMinuteExecRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Creates a rule that executes the PrivateRedshiftLambda function every five minutes. 
      ScheduleExpression: rate(5 minutes)
      Targets:
        - Arn: !GetAtt PrivateRedshiftLambda.Arn
          Id: 1

  # provision a permission object that lets our rule invoke the lambda.
  LambdaFiveMinuteExecRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PrivateRedshiftLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaFiveMinuteExecRule.Arn 


Outputs:
  Vpc:
    Description: A reference to the created Vpc
    Value: !Ref Vpc

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1